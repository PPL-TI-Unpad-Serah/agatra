openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Agatra API'
  description: API for Arcade Games Tracker (AGATRA)

servers:
    - url: "http://localhost:8080"

paths:
  /login:
    post:
      tags:
        - Auth
      summary: Login
      security: []
      requestBody:
        content:
          "multipart-form-data":
            schema:
              properties:
                username:
                  description: The name of an user
                  type: string
                password:
                  description: The password needed for an user to log in to the application
                  type: string
      responses:
        200:
          description: Logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
                  user:
                    $ref: "#/components/schemas/user"
        400:
          description: Wrong username or password
          content:
            application/json:
              schema:
                properties:
                  error:
                    $ref: "#/components/schemas/error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                properties:
                  error:
                    $ref: "#/components/schemas/error"
  /logout:
    post:
      tags:
        - Auth
      summary: Logout
      responses:
        200:
          description: Logged out
  /register:
    post:
      tags:
        - Auth
      summary: Create a new account
      requestBody:
        content:
          "multipart-form-data":
            schema:
              properties:
                username:
                  description: The name of an user. Should be unique and consist of 3 to 30 alphanumeric characters
                  type: string
                email:
                  description: Email to connect to user account. Should be a valid email address
                  type: string
                password:
                  description: The password needed for an user to log in to the application. Should be between 8 and 50 characters in length
                  type: string
                confirm_password:
                  description: Typing the password the second time to ensure no typo and confirmation. Should be the same as password
                  type: string
      responses:
        200:
          description: Account succesfully created
        400: 
          description: Invalid input
          content:
            application/json:
              schema:
                properties:
                  error:
                    $ref: "#/components/schemas/error"
        409: 
          description: Account username or email already existed
          content:
            application/json:
              schema:
                properties:
                  error:
                    $ref: "#/components/schemas/error"
        500: 
          description: Internal server error
          content:
            application/json:
              schema:
                properties:
                  error:
                    $ref: "#/components/schemas/error"

  /arcade_centers:
    get:
      tags:
        - User Search
      summary: Get all arcade centres
      description: Get all arcade centres. Sorted alphabetically descending
      responses:
        '200':
          description: All arcade centres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/arcade_center"
  /admin/arcade_centers/{arcade_center_id}:
    parameters:
      - name: arcade_center_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/arcade_center_id"
    put:
      tags:
        - Admin Supported Content Management
      summary: Edit an arcade center
      description: Edit an arcade center. Only `admin` can use this endpoint.
      requestBody:
        content:
          "multipart/form-data":
            schema:
              properties:
                name:
                  type: string
                info:
                  type: string
      responses:
        "200":
          description: The edited arcade center
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/arcade_center"
        "401":
          description: Unauthorized because user is unauthenticated. Must login first
        "403":
          description: Forbidden because user do not have sufficient authority to add, edit or delete stuff.
  
  /cities:
    get:
      tags:
        - User Search
        - Sprint 6 Endpoints
      summary: Get all cities
      description: Get all cities.  Sorted alphabetically descending
      responses:
        '200':
          description: All cities
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/city"
  /admin/cities:
    post:
      tags:
        - Admin Supported Content Management
        - Sprint 6 Endpoints
      summary: Add a city
      description: Edit a city. Only `admin` can use this endpoint.
      requestBody:
        content:
          "multipart/form-data":
            schema:
              properties:
                name:
                  type: string
      responses:
        "200":
          description: The added city
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/city"
  /admin/cities/{city_id}:
    parameters:
      - name: city_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/city_id"
    put:
      tags:
        - Admin Supported Content Management
        - Sprint 6 Endpoints
      summary: Edit a city
      description: Edit a city. Only `admin` can use this endpoint.
      requestBody:
        content:
          "multipart/form-data":
            schema:
              properties:
                name:
                  type: string
      responses:
        "200":
          description: The edited city
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/city"
        "401":
          description: Unauthorized because user is unauthenticated. Must login first
        "403":
          description: Forbidden because user do not have sufficient authority to add, edit or delete stuff.

  /arcade_locations:
    get:
      tags:
        - User Search
      summary: Get all arcade locations
      description: Get all arcade locations. Fetches 10 at a time
      parameters:
        - name: search
          in: query
          description: |
            Should be >3 characters in length to take effect

            if this is provided, just ignore everything else
          schema:
            type: string
        - name: nearby
          description: takes priority over city. If true, will return locations sorted by distance from the user's location. Defaults to all if neither is provided.
          in: query
          schema:
            type: boolean
        - name: city
          description: unused if nearby is true. Defaults to all if neither is provided.
          in: query
          schema: 
            $ref: "#/components/schemas/city_id"
        - name: page
          description: defaults to 1 (first page) if not provided
          in: query
          schema:
            type: integer
        - name: game_title_version
          description: takes priority oveer game_title_id. Defaults to all if neither is provided.
          in: query
          schema:
            $ref: "#/components/schemas/game_title_version_id"
        - name: game_title
          description: unused if game_title_version_id is not provided. Defaults to all if neither is provided.
          in: query
          schema:
            $ref: "#/components/schemas/game_title_id"
        - name: arcade_center
          description: defaults to all arcade center if not provided
          in: query
          schema:
            $ref: "#/components/schemas/arcade_center_id"
      responses:
        '200':
          description: All cities on the specified page
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/arcade_location_compact"
  /arcade_locations/{arcade_location_id}:
    parameters:
      - name: arcade_location_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/arcade_location_id"
    get:
      tags:
        - User Search
      summary: Get a location
      responses:
        "200":
          description: The location corresponding to the provided `arcade_location_id`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/arcade_location"
  /admin/arcade_locations/{arcade_location_id}:
    parameters:
      - name: arcade_location_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/arcade_location_id"
    put:
      tags:
        - Maintainer Content Management
      summary: Edit a location
      description: Edit a location. Only `admin` or `maintainer` can use this endpoint.
      requestBody:
        content:
          "multipart/form-data":
            schema:
              properties:
                name:
                  type: string
                description:
                  type: string
                lat:
                  type: number
                long:
                  type: number
                city_id:
                  $ref: "#/components/schemas/city_id"
                arcade_center_id:
                  $ref: "#/components/schemas/arcade_center_id"
      responses:
        "200":
          description: The edited location
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/arcade_location"
        "401":
          description: Unauthorized because user is unauthenticated. Must login first
        "403":
          description: Forbidden because user do not have sufficient authority to edit or delete stuff.

  /arcade_machines:
    get:
      tags:
        - Maintainer Content Management
      summary: Get all machines of a location
      parameters:
        - name: arcade_location
          in: query
          description: The location to get machines from
          required: true
          schema:
            $ref: "#/components/schemas/arcade_location_id"
      responses:
        "200":
          description: The machines corresponding to the provided `arcade_location_id`
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/arcade_machine"
  /arcade_machines/{arcade_machine_id}:
    parameters:
      - name: arcade_machine_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/arcade_machine_id"
    get:
      tags:
        - Maintainer Content Management
      summary: Get a machine
      responses:
        "200":
          description: The machine corresponding to the provided `arcade_machine_id`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/arcade_machine"
  /admin/arcade_machines:
    post:
      tags:
        - Maintainer Content Management
      summary: Add a machine
      description: Add a machine. Only `admin` or `maintainer` can use this endpoint.
      requestBody:
        content:
          "multipart/form-data":
            schema:
              properties:
                name:
                  type: string
                machine_id:
                  $ref: "#/components/schemas/arcade_machine_id"
                location_id:
                  $ref: "#/components/schemas/arcade_location_id"
                game_title_version_id:
                  $ref: '#/components/schemas/game_title_version_id'
                machine_count:
                  description: The amount of a machine in an arcade centre
                  type: integer
                price:
                  description: The price for each play of a machine
                  type: integer
      responses:
        "200":
          description: The added machine
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/arcade_machine"
        "401":
          description: Unauthorized because user is unauthenticated. Must login first
        "403":
          description: Forbidden because user do not have sufficient authority to edit or delete stuff.
  /admin/arcade_machines/{arcade_machine_id}:
    parameters:
      - name: arcade_machine_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/arcade_machine_id"
    put:
      tags:
        - Maintainer Content Management
      summary: Edit a machine
      description: Edit a machine. Only `admin` or `maintainer` can use this endpoint.
      requestBody:
        content:
          "multipart/form-data":
            schema:
              properties:
                name:
                  type: string
                machine_id:
                  $ref: "#/components/schemas/arcade_machine_id"
                game_title_version_id:
                  $ref: '#/components/schemas/game_title_version_id'
                machine_count:
                  description: The amount of a machine in an arcade centre
                  type: integer
                price:
                  description: The price for each play of a machine
                  type: integer
      responses:
        "200":
          description: The edited machine
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/arcade_machine"
        "401":
          description: Unauthorized because user is unauthenticated. Must login first
        "403":
          description: Forbidden because user do not have sufficient authority to edit or delete stuff.

  /game_title_versions/{game_title_id}:
    parameters:
      - name: game_title_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/game_title_id"
    get:
      tags:
        - User Search
      summary: Get all arcade machine versions
      description: Get all arcade machine versions of a title.  Sorted by PK descending
      responses:
        '200':
          description: All arcade machine versions of the title specified in `title_id`
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/game_title_version"
  /admin/game_title_versions/{game_title_version_id}:
    parameters:
      - name: game_title_version_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/game_title_version_id"
    put:
      tags:
        - Admin Supported Content Management
      summary: Edit a version
      description: Edit a version. Only `admin` can use this endpoint.
      requestBody:
        content:
          "multipart/form-data":
            schema:
              properties:
                name:
                  type: string
                info:
                  type: string
      responses:
        "200":
          description: The edited version
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/game_title_version"
        "401":
          description: Unauthorized because user is unauthenticated. Must login first
        "403":
          description: Forbidden because user do not have sufficient authority to edit or delete stuff.

  /game_titles:
    get:
      tags:
        - User Search
        - Sprint 6 Endpoints
      summary: Get all arcade game titles
      description: Get all arcade game titles. Sorted alphabetically descending
      responses:
        '200':
          description: All arcade game titles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/game_title"
  /admin/game_titles:
    post:
      tags:
        - Admin Supported Content Management
        - Sprint 6 Endpoints
      summary: Add a game title
      description: Add a game title. Only `admin` can use this endpoint.
      requestBody:
        content:
          "multipart/form-data":
            schema:
              properties:
                name:
                  type: string
      responses:
        "200":
          description: The added arcade game title
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/game_title"
        "401":
          description: Unauthorized because user is unauthenticated. Must login first
        "403":
          description: Forbidden because user do not have sufficient authority to edit or delete stuff.
  /admin/game_titles/{game_title_id}:
    parameters:
      - name: game_title_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/game_title_id"
    put:
      tags:
        - Admin Supported Content Management
        - Sprint 6 Endpoints
      summary: Edit an arcade game title
      description: Edit an arcade game title. Only `admin` can use this endpoint.
      requestBody:
        content:
          "multipart/form-data":
            schema:
              properties:
                name:
                  type: string
      responses:
        "200":
          description: The edited arcade game title
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/game_title"
        "401":
          description: Unauthorized because user is unauthenticated. Must login first
        "403":
          description: Forbidden because user do not have sufficient authority to edit or delete stuff.

  /users/{user_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/user_id"
    get:
      tags:
        - Admin User Management
      summary: Get an user
      responses:
        "200":
          description: The user corresponding to the provided `user_id`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
  /users:
    get:
      tags:
        - Admin User Management
      summary: Search for users
      description: Search for users
      parameters:
        - name: search
          in: query
          required: true
          description: |
            Should be >3 characters in length to take effect
          schema:
            type: string
      responses:
        '200':
          description: All users matching the specified search query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
  /admin/users/privileged:
    get:
      tags:
        - Admin User Management
      summary: Get all admin and maintainer users
      description: Get all admin and maintainer users, sorted by username
      responses:
        '200':
          description: All privileged users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
  /admin/users/{user_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/user_id"
    put:
      tags:
        - Admin User Management
      summary: Edit a user
      description: Edit a user. Only `admin` role can use this endpoint.
      requestBody:
        content:
          "multipart/form-data":
            schema:
              properties:
                role:
                  description: The roles assigned to an user
                  type: string
                  enum:
                    - user
                    - admin
                    - maintainer
      responses:
        "200":
          description: The edited user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "401":
          description: Unauthorized because user is unauthenticated. Must login first
        "403":
          description: Forbidden because user do not have sufficient authority to edit or delete stuff.


components:
  schemas:
    arcade_center_id:
      description: The unique identifier of an arcade center
      type: integer
    arcade_center:
      description: An arcade center object
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/arcade_center_id'
        name:
          description: The name of an arcade centre
          type: string
        info:
          description: Information of the arcade center, usually regarding its currency
          type: string
    city_id:
      description: The unique identifier of a city
      type: integer
    city:
      description: A city object
      type: object
      properties:
        id:
          $ref: '#/components/schemas/city_id'
        name:
          description: The name of a city
          type: string
    error:
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable error message
          type: string
    arcade_location_id:
      description: The unique identifier of a location
      type: integer
    arcade_location:
      description: A location object
      type: object
      properties:
        id:
          $ref: '#/components/schemas/arcade_location_id'
        name:
          type: string
        description:
          type: string
        lat:
          type: number
        long:
          type: number
        arcade_center:
          $ref: '#/components/schemas/arcade_center'
        arcade_machines:
          type: array
          items:
            $ref: '#/components/schemas/arcade_machine'
        city:
          $ref: '#/components/schemas/city'
    arcade_location_compact:
      description: A compact location object to display on search results
      type: object
      properties:
        id:
          $ref: '#/components/schemas/arcade_location_id'
        name:
          type: string
        versions:
          type: array
          items:
            $ref: '#/components/schemas/game_title_version'
    arcade_machine_id:
      description: The unique identifier of an arcade machine
      type: integer    
    arcade_machine:
      description: A machine object
      type: object
      properties:
        machine_id:
          $ref: '#/components/schemas/arcade_machine_id'
        version:
          $ref: '#/components/schemas/game_title_version'
        machine_count:
          description: The amount of a machine in an arcade centre
          type: integer
        price:
          description: The price for each play of a machine
          type: integer
    game_title_version_id:
      description: The unique identifier of the version of an arcade machine
      type: integer
    game_title_version:
      description: A version object
      type: object
      properties:
        id:
          $ref: '#/components/schemas/game_title_version_id'
        name:
          description: The name of a version
          type: string
        info:
          description: Info of a version. Can be null
          type: string
        title:
          $ref: '#/components/schemas/game_title_compact'
    game_title_version_compact:
      description: A version object without title field
      properties:
        id:
          $ref: '#/components/schemas/game_title_version_id'
        name:
          description: The name of a version
          type: string
        info:
          description: Info of a version. Can be null
          type: string
    game_title_id:
      description: The unique identifier of a title
      type: integer
    game_title:
      description: A title object
      type: object
      properties:
        id:
          $ref: '#/components/schemas/game_title_id'
        name:
          description: The name of the title
          type: string
        versions:
          type: array
          items:
            $ref: '#/components/schemas/game_title_version_compact'
    game_title_compact:
      description: A title object without versions field
      type: object
      properties:
        id:
          $ref: '#/components/schemas/game_title_id'
        name:
          description: The name of the title
          type: string
    user_id:
      description: The user identifier of an user
      type: integer
    user:
      description: An user object
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/user_id'
        username:
          description: The name of an user
          type: string
        email:
          description: The email connected to user
          type: string
        password:
          description: The password needed for an user to log in to the application
          type: string
        role:
          description: The roles assigned to an user
          type: string
          enum:
            - member
            - admin
            - maintainer
  securitySchemes:
    ApiKey:
      type: http
      scheme: bearer

security:
  - ApiKey: []